/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FitnessClub.Analyst;

import Business.Course.Course;
import Business.Enterprise.FitnessClubEnterprise;
import Business.Enterprise.OnlineSalesEnterprise;
import Business.Organization.Organization;
import Business.Sales.OnlineSales;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentRequest;
import Business.WorkQueue.CourseRequest;
import Business.WorkQueue.OnlineSalesQueue;
import Business.WorkQueue.OnlineSalesRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author luliu
 */
public class AnalysisJPanel extends javax.swing.JPanel {

    private FitnessClubEnterprise fitenterprise;
    private JPanel container;
    private OnlineSalesEnterprise salesenterprise;

    /**
     * Creates new form AnalysisJPanel
     */
    public AnalysisJPanel(JPanel container, FitnessClubEnterprise fitenterprise, OnlineSalesEnterprise salesenterprise) {
        initComponents();
        this.container = container;
        this.fitenterprise = fitenterprise;
        this.salesenterprise = salesenterprise;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popCourseButton = new javax.swing.JButton();
        popTrainerButton = new javax.swing.JButton();
        popItemButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        popCourseButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        popCourseButton.setForeground(new java.awt.Color(102, 0, 0));
        popCourseButton.setText("Check the top 5 popular Course");
        popCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCourseButtonActionPerformed(evt);
            }
        });

        popTrainerButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        popTrainerButton.setForeground(new java.awt.Color(102, 0, 51));
        popTrainerButton.setText("Check the top 5 popular Trainer");
        popTrainerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTrainerButtonActionPerformed(evt);
            }
        });

        popItemButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        popItemButton.setForeground(new java.awt.Color(102, 0, 51));
        popItemButton.setText("Check the top 5 popular Item");
        popItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popItemButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("一 一 一 一 一 一 一 一 一 一 一 一 一  一 一 一 一 一 一 一 一 ");

        jLabel8.setText("一 一 一 一 一 一 一 一 一 一 一 一 一  一 一 一 一 一 一 一 一 ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(popCourseButton)
                                .addComponent(popItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(popTrainerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(popCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(popTrainerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(popItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void popCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCourseButtonActionPerformed
        // TODO add your handling code here:
        HashMap<String, Integer> courseRank = new HashMap();

        for (Course course : fitenterprise.getCourseDirectory().getCourseList()) {
            courseRank.put(course.getCourseName(), 0);
        }

        for (CourseRequest courseRequest : fitenterprise.getCourseQueue().getCourseRequestList()) {
            Course course = courseRequest.getCourse();
            int count = 0;
            if (courseRank.containsKey(course.getCourseName())) {
                count = courseRank.get(course.getCourseName());
                count++;
                courseRank.put(course.getCourseName(), count);

            }
        }

        ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(courseRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return -o1.getValue() + o2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("Course selected", "Course Name", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame chartFrame = new ChartFrame("Most popular courses", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 400);
    }//GEN-LAST:event_popCourseButtonActionPerformed

    private void popTrainerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTrainerButtonActionPerformed
        // TODO add your handling code here:

        HashMap<String, Integer> trainerRank = new HashMap();

        for (Organization organization : fitenterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equals("Trainer Organization")) {
                for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                    trainerRank.put(ua.getPerson().getName(), 0);
                }
            }
        }

        for (AppointmentRequest appRequest : fitenterprise.getAppointmentQueue().getAppointmentRequestList()) {
            int count = 0;
            if (trainerRank.containsKey(appRequest.getReceiver().getPerson().getName())) {
                count = trainerRank.get(appRequest.getReceiver().getPerson().getName());
            }
            count++;
            trainerRank.put(appRequest.getReceiver().getPerson().getName(), count);
        }

        ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(trainerRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return -o1.getValue() + o2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("Trainer Selected", "Trainer Name", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame chartFrame = new ChartFrame("Most popular trainers", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 400);

    }//GEN-LAST:event_popTrainerButtonActionPerformed

    private void popItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popItemButtonActionPerformed
        // TODO add your handling code here:
        HashMap<String, Integer> itemRank = new HashMap();
        OnlineSalesQueue osq = new OnlineSalesQueue();

        for (Organization organization : salesenterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equals("Sales Organization")) {
                for (UserAccount us : organization.getUserAccountDirectory().getUserAccountList()) {
                    for (OnlineSalesRequest salesRequest : us.getOnlineSalesQueue().getOnlinesalesRequestList()) {
                        osq.getOnlinesalesRequestList().add(salesRequest);
                    }
                }
            }
        }

        for (OnlineSalesRequest salesRequest : osq.getOnlinesalesRequestList()) {
            for (OnlineSales item : salesRequest.getItemOrder().keySet()) {
                int count = 0;
                if (itemRank.containsKey(item.getItemname())) {
                    count = itemRank.get(item.getItemname());
                }
                count = count + salesRequest.getItemOrder().get(item);
                itemRank.put(item.getItemname(), count);
            }
        }

        ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(itemRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return -o1.getValue() + o2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("Item Order", "Item Name", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame chartFrame = new ChartFrame("Most popular items", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 400);

    }//GEN-LAST:event_popItemButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton popCourseButton;
    private javax.swing.JButton popItemButton;
    private javax.swing.JButton popTrainerButton;
    // End of variables declaration//GEN-END:variables
}
